# Generated by Django 3.2.6 on 2022-03-08 05:22

import accounts.models
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import django_file_validator.validators
import versatileimagefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('username', models.CharField(error_messages={'unique': 'This user name has already been registered. このユーザ名は既に登録されています。'}, help_text='You can use alphanumeric characters and @, . , +, -, and _ can be used. 英数字と@, ., +, -, _が使えます。', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='Username')),
                ('commercial_user_or_not', models.BooleanField(default=False)),
                ('official_user_or_not', models.BooleanField(default=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('description', models.CharField(blank=True, max_length=200, verbose_name='Description')),
                ('hobby', models.CharField(blank=True, max_length=100, verbose_name='Hobby')),
                ('nickname', models.CharField(blank=True, max_length=50, verbose_name='Nickname')),
                ('web_link', models.URLField(blank=True, verbose_name='WebLink')),
                ('twitter_link', models.URLField(blank=True, verbose_name='TwitterLink')),
                ('instagram_link', models.URLField(blank=True, verbose_name='InstagramLink')),
                ('facebook_link', models.URLField(blank=True, verbose_name='FacebookLink')),
                ('last_login', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('date_out', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('icon', versatileimagefield.fields.VersatileImageField(blank=True, upload_to=accounts.models.Icon_directory_path.icon_directory_path, validators=[django_file_validator.validators.MaxSizeValidator(2048)], verbose_name='Icon')),
                ('background', versatileimagefield.fields.VersatileImageField(blank=True, upload_to=accounts.models.Background_directory_path.background_directory_path, validators=[django_file_validator.validators.MaxSizeValidator(2048)], verbose_name='Background')),
                ('want_messages', models.CharField(default='yes', max_length=10, verbose_name='No/Yes')),
                ('is_cancel', models.CharField(default='no', max_length=10, verbose_name='No/Yes')),
                ('country', models.CharField(blank=True, max_length=30, verbose_name='Country')),
                ('prefecture', models.CharField(blank=True, max_length=20, verbose_name='Prefecture')),
                ('city', models.CharField(blank=True, max_length=30, verbose_name='City')),
                ('emotion', models.CharField(blank=True, max_length=100, verbose_name='UserEmotion')),
                ('color', models.CharField(blank=True, max_length=100, verbose_name='UserColor')),
                ('pin_x', models.FloatField(blank=True, null=True)),
                ('pin_y', models.FloatField(blank=True, null=True)),
                ('blocking', models.ManyToManyField(blank=True, default=None, related_name='Blocking', to=settings.AUTH_USER_MODEL)),
                ('follower', models.ManyToManyField(blank=True, default=None, related_name='Follower', to=settings.AUTH_USER_MODEL)),
                ('following', models.ManyToManyField(blank=True, default=None, related_name='Following', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
